//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.mstjr.murmur.proxy.server;

import com.zeroc.Ice.Current;
import com.zeroc.Ice.OutputStream;
import net.mstjr.murmur.exceptions.*;
import net.mstjr.murmur.exceptions.invalid.*;
import net.mstjr.murmur.exceptions.server.ServerBootedException;
import net.mstjr.murmur.exceptions.server.ServerFailureException;
import net.mstjr.murmur.helpers.*;
import net.mstjr.murmur.logging.LogEntry;
import net.mstjr.murmur.logging.LogListHelper;
import net.mstjr.murmur.proxy.ContextChannel;
import net.mstjr.murmur.proxy.ContextServer;
import net.mstjr.murmur.proxy.ContextUser;
import net.mstjr.murmur.proxy.Meta;
import net.mstjr.murmur.proxy.server.channel.ACL;
import net.mstjr.murmur.proxy.server.channel.Channel;
import net.mstjr.murmur.proxy.server.entities.Ban;
import net.mstjr.murmur.proxy.server.entities.Group;
import net.mstjr.murmur.proxy.server.entities.Tree;
import net.mstjr.murmur.proxy.server.users.User;
import net.mstjr.murmur.proxy.server.users.UserInfo;
import net.mstjr.murmur.prx.ServerAuthenticatorPrx;
import net.mstjr.murmur.prx.ServerCallbackPrx;
import net.mstjr.murmur.prx.ServerContextCallbackPrx;

import java.util.Map;
import java.util.concurrent.CompletionStage;

/**
 * Per-server interface. This includes all methods for configuring and altering
 * the state of a single virtual server. You can retrieve a pointer to this interface
 * from one of the methods in {@link Meta}.
 **/
public interface Server extends com.zeroc.Ice.Object {
    /**
     * Holds the result of operation getACL.
     **/
    class GetACLResult {
        /**
         * Default constructor.
         **/
        public GetACLResult() {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetACL.
         *
         * @param acls    List of ACLs on the channel. This will include inherited ACLs.
         * @param groups  List of groups on the channel. This will include inherited groups.
         * @param inherit Does this channel inherit ACLs from the parent channel?
         **/
        public GetACLResult(ACL[] acls, Group[] groups, boolean inherit) {
            this.acls = acls;
            this.groups = groups;
            this.inherit = inherit;
        }

        /**
         * List of ACLs on the channel. This will include inherited ACLs.
         **/
        public ACL[] acls;
        /**
         * List of groups on the channel. This will include inherited groups.
         **/
        public Group[] groups;
        /**
         * Does this channel inherit ACLs from the parent channel?
         **/
        public boolean inherit;

        public void write(com.zeroc.Ice.OutputStream ostr) {
            ACLListHelper.write(ostr, this.acls);
            GroupListHelper.write(ostr, this.groups);
            ostr.writeBool(this.inherit);
        }

        public void read(com.zeroc.Ice.InputStream istr) {
            this.acls = ACLListHelper.read(istr);
            this.groups = GroupListHelper.read(istr);
            this.inherit = istr.readBool();
        }
    }

    /**
     * Shows if the server currently running (accepting users).
     *
     * @param current The Current object for the invocation.
     * @return Run-state of server.
     **/
    java.util.concurrent.CompletionStage<Boolean> isRunningAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Start server.
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> startAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException,
            ServerFailureException;

    /**
     * Stop server.
     * Note: Server will be restarted on Murmur restart unless explicitly disabled
     * with setConf("boot", false)
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> stopAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Delete server and all it's configuration.
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> deleteAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Fetch the server id.
     *
     * @param current The Current object for the invocation.
     * @return Unique server id.
     **/
    java.util.concurrent.CompletionStage<Integer> idAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     *
     * @param cb      Callback interface which will receive notifications.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see #removeCallbackAsync(ServerCallbackPrx, Current)
     **/
    java.util.concurrent.CompletionStage<Void> addCallbackAsync(ServerCallbackPrx cb, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Remove a callback.
     *
     * @param cb      Callback interface to be removed.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see #addCallbackAsync(ServerCallbackPrx, Current)
     **/
    java.util.concurrent.CompletionStage<Void> removeCallbackAsync(ServerCallbackPrx cb, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     *
     * @param auth    Authenticator object to perform subsequent authentications.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setAuthenticatorAsync(ServerAuthenticatorPrx auth, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Retrieve configuration item.
     *
     * @param key     Configuration key.
     * @param current The Current object for the invocation.
     * @return Configuration value. If this is empty, see {@link Meta#getDefaultConfAsync(Current)}
     **/
    java.util.concurrent.CompletionStage<String> getConfAsync(String key, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            WriteOnlyException;

    /**
     * Retrieve all configuration items.
     *
     * @param current The Current object for the invocation.
     * @return All configured values. If a value isn't set here, the value from {@link Meta#getDefaultConfAsync(Current)} is used.
     **/
    java.util.concurrent.CompletionStage<java.util.Map<String, String>> getAllConfAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Set a configuration item.
     *
     * @param key     Configuration key.
     * @param value   Configuration value.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setConfAsync(String key, String value, com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Set superuser password. This is just a convenience for using {@link #updateRegistrationAsync(int, Map, Current)} on user id 0.
     *
     * @param pw      Password.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setSuperuserPasswordAsync(String pw, com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch log entries.
     *
     * @param first   Lowest numbered entry to fetch. 0 is the most recent item.
     * @param last    Last entry to fetch.
     * @param current The Current object for the invocation.
     * @return List of log entries.
     **/
    java.util.concurrent.CompletionStage<LogEntry[]> getLogAsync(int first, int last, com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch length of log
     *
     * @param current The Current object for the invocation.
     * @return Number of entries in log
     **/
    java.util.concurrent.CompletionStage<Integer> getLogLenAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch all users. This returns all currently connected users on the server.
     *
     * @param current The Current object for the invocation.
     * @return List of connected users.
     * @see #getStateAsync(int, Current)
     **/
    java.util.concurrent.CompletionStage<java.util.Map<Integer, User>> getUsersAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     *
     * @param current The Current object for the invocation.
     * @return List of defined channels.
     * @see #getChannelStateAsync(int, Current)
     **/
    java.util.concurrent.CompletionStage<java.util.Map<Integer, Channel>> getChannelsAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     *
     * @param session Connection ID of user. See {@link User#session}.
     * @param current The Current object for the invocation.
     * @return Certificate list of user.
     **/
    java.util.concurrent.CompletionStage<byte[][]> getCertificateListAsync(int session, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     *
     * @param current The Current object for the invocation.
     * @return Recursive tree of all channels and connected users.
     **/
    java.util.concurrent.CompletionStage<Tree> getTreeAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Fetch all current IP bans on the server.
     *
     * @param current The Current object for the invocation.
     * @return List of bans.
     **/
    java.util.concurrent.CompletionStage<Ban[]> getBansAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link #getBansAsync(Current)} and then
     * append to the returned list before calling this method.
     *
     * @param bans    List of bans.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setBansAsync(Ban[] bans, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     *
     * @param session Connection ID of user. See {@link User#session}.
     * @param reason  Text message to show when user is kicked.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> kickUserAsync(int session, String reason, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Get state of a single connected user.
     *
     * @param session Connection ID of user. See {@link User.session}.
     * @param current The Current object for the invocation.
     * @return State of connected user.
     * @see setState
     * @see getUsers
     **/
    java.util.concurrent.CompletionStage<User> getStateAsync(int session, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Set user state. You can use this to move, mute and deafen users.
     *
     * @param state   User state to set.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see getState
     **/
    java.util.concurrent.CompletionStage<Void> setStateAsync(User state, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Send text message to a single user.
     *
     * @param session Connection ID of user. See {@link User.session}.
     * @param text    Message to send.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see sendMessageChannel
     **/
    java.util.concurrent.CompletionStage<Void> sendMessageAsync(int session, String text, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Check if user is permitted to perform action.
     *
     * @param session   Connection ID of user. See {@link User.session}.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param perm      Permission bits to check.
     * @param current   The Current object for the invocation.
     * @return true if any of the permissions in perm were set for the user.
     **/
    java.util.concurrent.CompletionStage<Boolean> hasPermissionAsync(int session, int channelid, int perm, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Return users effective permissions
     *
     * @param session   Connection ID of user. See {@link User.session}.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param current   The Current object for the invocation.
     * @return bitfield of allowed actions
     **/
    java.util.concurrent.CompletionStage<Integer> effectivePermissionsAsync(int session, int channelid, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     *
     * @param session Session of user which should receive context entry.
     * @param action  Action string, a unique name to associate with the action.
     * @param text    Name of action shown to user.
     * @param cb      Callback interface which will receive notifications.
     * @param ctx     Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see removeContextCallback
     **/
    java.util.concurrent.CompletionStage<Void> addContextCallbackAsync(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Remove a callback.
     *
     * @param cb      Callback interface to be removed. This callback will be removed from all from all users.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see addContextCallback
     **/
    java.util.concurrent.CompletionStage<Void> removeContextCallbackAsync(ServerContextCallbackPrx cb, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Get state of single channel.
     *
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param current   The Current object for the invocation.
     * @return State of channel.
     * @see setChannelState
     * @see getChannels
     **/
    java.util.concurrent.CompletionStage<Channel> getChannelStateAsync(int channelid, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     *
     * @param state   Channel state to set.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see getChannelState
     **/
    java.util.concurrent.CompletionStage<Void> setChannelStateAsync(Channel state, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            NestingLimitException,
            ServerBootedException;

    /**
     * Remove a channel and all its subchannels.
     *
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> removeChannelAsync(int channelid, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Add a new channel.
     *
     * @param name    Name of new channel.
     * @param parent  Channel ID of parent channel. See {@link Channel.id}.
     * @param current The Current object for the invocation.
     * @return ID of newly created channel.
     **/
    java.util.concurrent.CompletionStage<Integer> addChannelAsync(String name, int parent, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            NestingLimitException,
            ServerBootedException;

    /**
     * Send text message to channel or a tree of channels.
     *
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param tree      If true, the message will be sent to the channel and all its subchannels.
     * @param text      Message to send.
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @see sendMessage
     **/
    java.util.concurrent.CompletionStage<Void> sendMessageChannelAsync(int channelid, boolean tree, String text, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Retrieve ACLs and Groups on a channel.
     *
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete with an instance of Server.GetACLResult.
     **/
    java.util.concurrent.CompletionStage<GetACLResult> getACLAsync(int channelid, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     *
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param acls      List of ACLs on the channel.
     * @param groups    List of groups on the channel.
     * @param inherit   Should this channel inherit ACLs from the parent channel?
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setACLAsync(int channelid, ACL[] acls, Group[] groups, boolean inherit, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     *
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param session   Connection ID of user. See {@link User.session}.
     * @param group     Group name to add to.
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> addUserToGroupAsync(int channelid, int session, String group, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     *
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param session   Connection ID of user. See {@link User.session}.
     * @param group     Group name to remove from.
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> removeUserFromGroupAsync(int channelid, int session, String group, com.zeroc.Ice.Current current)
            throws InvalidChannelException,
            InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     *
     * @param session Connection ID of user. See {@link User.session}.
     * @param source  Group name to redirect from.
     * @param target  Group name to redirect to.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> redirectWhisperGroupAsync(int session, String source, String target, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidSessionException,
            ServerBootedException;

    /**
     * Map a list of {@link User.userid} to a matching name.
     *
     * @param current The Current object for the invocation.
     * @return Matching list of names, with an empty string representing invalid or unknown ids.
     **/
    java.util.concurrent.CompletionStage<java.util.Map<Integer, String>> getUserNamesAsync(int[] ids, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Map a list of user names to a matching id.
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with the result.
     * @reuturn List of matching ids, with -1 representing invalid or unknown user names.
     **/
    java.util.concurrent.CompletionStage<java.util.Map<String, Integer>> getUserIdsAsync(String[] names, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Register a new user.
     *
     * @param info    Information about new user. Must include at least "name".
     * @param current The Current object for the invocation.
     * @return The ID of the user. See {@link RegisteredUser.userid}.
     **/
    java.util.concurrent.CompletionStage<Integer> registerUserAsync(java.util.Map<UserInfo, String> info, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidUserException,
            ServerBootedException;

    /**
     * Remove a user registration.
     *
     * @param userid  ID of registered user. See {@link RegisteredUser.userid}.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> unregisterUserAsync(int userid, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidUserException,
            ServerBootedException;

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> updateRegistrationAsync(int userid, java.util.Map<UserInfo, String> info, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidUserException,
            ServerBootedException;

    /**
     * Fetch registration for a single user.
     *
     * @param userid  ID of registered user. See {@link RegisteredUser.userid}.
     * @param current The Current object for the invocation.
     * @return Registration record.
     **/
    java.util.concurrent.CompletionStage<java.util.Map<UserInfo, String>> getRegistrationAsync(int userid, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidUserException,
            ServerBootedException;

    /**
     * Fetch a group of registered users.
     *
     * @param filter  Substring of user name. If blank, will retrieve all registered users.
     * @param current The Current object for the invocation.
     * @return List of registration records.
     **/
    java.util.concurrent.CompletionStage<java.util.Map<Integer, String>> getRegisteredUsersAsync(String filter, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     *
     * @param name    User name. See {@link RegisteredUser.name}.
     * @param pw      User password.
     * @param current The Current object for the invocation.
     * @return User ID of registered user (See {@link RegisteredUser.userid}), -1 for failed authentication or -2 for unknown usernames.
     **/
    java.util.concurrent.CompletionStage<Integer> verifyPasswordAsync(String name, String pw, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     *
     * @param userid  ID of registered user. See {@link RegisteredUser.userid}.
     * @param current The Current object for the invocation.
     * @return Custom texture associated with user or an empty texture.
     **/
    java.util.concurrent.CompletionStage<byte[]> getTextureAsync(int userid, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidUserException,
            ServerBootedException;

    /**
     * Set a user texture (now called avatar).
     *
     * @param userid  ID of registered user. See {@link RegisteredUser.userid}.
     * @param tex     Texture (as a Byte-Array) to set for the user, or an empty texture to remove the existing texture.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setTextureAsync(int userid, byte[] tex, com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            InvalidTextureException,
            InvalidUserException,
            ServerBootedException;

    /**
     * Get virtual server uptime.
     *
     * @param current The Current object for the invocation.
     * @return Uptime of the virtual server in seconds
     **/
    java.util.concurrent.CompletionStage<Integer> getUptimeAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException,
            ServerBootedException;

    /**
     * Update the server's certificate information.
     * <p>
     * Reconfigure the running server's TLS socket with the given
     * certificate and private key.
     * <p>
     * The certificate and and private key must be PEM formatted.
     * <p>
     * New clients will see the new certificate.
     * Existing clients will continue to see the certificate the server
     * was using when they connected to it.
     * <p>
     * This method throws InvalidInputDataException if any of the
     * following errors happen:
     * - Unable to decode the PEM certificate and/or private key.
     * - Unable to decrypt the private key with the given passphrase.
     * - The certificate and/or private key do not contain RSA keys.
     * - The certificate is not usable with the given private key.
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> updateCertificateAsync(String certificate, String privateKey, String passphrase, com.zeroc.Ice.Current current)
            throws InvalidInputDataException,
            InvalidSecretException,
            ServerBootedException;

    /**
     * Makes the given user start listening to the given channel.
     *
     * @param userid    The ID of the user
     * @param channelid The ID of the channel
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> startListeningAsync(int userid, int channelid, com.zeroc.Ice.Current current);

    /**
     * Makes the given user stop listening to the given channel.
     *
     * @param userid    The ID of the user
     * @param channelid The ID of the channel
     * @param current   The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> stopListeningAsync(int userid, int channelid, com.zeroc.Ice.Current current);

    /**
     * @param userid    The ID of the user
     * @param channelid The ID of the channel
     * @param current   The Current object for the invocation.
     * @return s Whether the given user is currently listening to the given channel
     **/
    java.util.concurrent.CompletionStage<Boolean> isListeningAsync(int userid, int channelid, com.zeroc.Ice.Current current);

    /**
     * @param userid  The ID of the user
     * @param current The Current object for the invocation.
     * @return s An ID-list of channels the given user is listening to
     **/
    java.util.concurrent.CompletionStage<int[]> getListeningChannelsAsync(int userid, com.zeroc.Ice.Current current);

    /**
     * @param channelid The ID of the channel
     * @param current   The Current object for the invocation.
     * @return s An ID-list of users listening to the given channel
     **/
    java.util.concurrent.CompletionStage<int[]> getListeningUsersAsync(int channelid, com.zeroc.Ice.Current current);

    /**
     * @param receiverUserIDs list of IDs of the users the message shall be sent to
     * @param current         The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> sendWelcomeMessageAsync(int[] receiverUserIDs, com.zeroc.Ice.Current current);

    /**
     * @hidden
     */
    String[] _iceIds =
            {
                    "::Ice::Object",
                    "::Murmur::Server"
            };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current) {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current) {
        return ice_staticId();
    }

    static String ice_staticId() {
        return "::Murmur::Server";
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isRunning(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.isRunningAsync(current), (ostr, ret) ->
        {
            ostr.writeBool(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_start(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.startAsync(current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stop(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.stopAsync(current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_delete(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.deleteAsync(current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static CompletionStage<OutputStream> _iceD_id(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.idAsync(current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCallback(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerCallbackPrx iceP_cb;
        iceP_cb = ServerCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.addCallbackAsync(iceP_cb, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeCallback(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerCallbackPrx iceP_cb;
        iceP_cb = ServerCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.removeCallbackAsync(iceP_cb, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setAuthenticator(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerAuthenticatorPrx iceP_auth;
        iceP_auth = ServerAuthenticatorPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.setAuthenticatorAsync(iceP_auth, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getConf(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_key;
        iceP_key = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.getConfAsync(iceP_key, current), (ostr, ret) ->
        {
            ostr.writeString(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getAllConf(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getAllConfAsync(current), (ostr, ret) ->
        {
            ConfigMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setConf(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_key;
        String iceP_value;
        iceP_key = istr.readString();
        iceP_value = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.setConfAsync(iceP_key, iceP_value, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setSuperuserPassword(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pw;
        iceP_pw = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.setSuperuserPasswordAsync(iceP_pw, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLog(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_first;
        int iceP_last;
        iceP_first = istr.readInt();
        iceP_last = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getLogAsync(iceP_first, iceP_last, current), (ostr, ret) ->
        {
            LogListHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLogLen(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getLogLenAsync(current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUsers(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getUsersAsync(current), (ostr, ret) ->
        {
            UserMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getChannels(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getChannelsAsync(current), (ostr, ret) ->
        {
            ChannelMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCertificateList(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        iceP_session = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getCertificateListAsync(iceP_session, current), (ostr, ret) ->
        {
            CertificateListHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTree(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getTreeAsync(current), (ostr, ret) ->
        {
            ostr.writeValue(ret);
            ostr.writePendingValues();
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBans(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getBansAsync(current), (ostr, ret) ->
        {
            BanListHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setBans(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Ban[] iceP_bans;
        iceP_bans = BanListHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.setBansAsync(iceP_bans, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_kickUser(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        String iceP_reason;
        iceP_session = istr.readInt();
        iceP_reason = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.kickUserAsync(iceP_session, iceP_reason, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getState(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        iceP_session = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getStateAsync(iceP_session, current), (ostr, ret) ->
        {
            User.ice_write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setState(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        User iceP_state;
        iceP_state = User.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.setStateAsync(iceP_state, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendMessage(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        String iceP_text;
        iceP_session = istr.readInt();
        iceP_text = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.sendMessageAsync(iceP_session, iceP_text, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_hasPermission(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        int iceP_channelid;
        int iceP_perm;
        iceP_session = istr.readInt();
        iceP_channelid = istr.readInt();
        iceP_perm = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.hasPermissionAsync(iceP_session, iceP_channelid, iceP_perm, current), (ostr, ret) ->
        {
            ostr.writeBool(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_effectivePermissions(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        int iceP_channelid;
        iceP_session = istr.readInt();
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.effectivePermissionsAsync(iceP_session, iceP_channelid, current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addContextCallback(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        String iceP_action;
        String iceP_text;
        ServerContextCallbackPrx iceP_cb;
        int iceP_ctx;
        iceP_session = istr.readInt();
        iceP_action = istr.readString();
        iceP_text = istr.readString();
        iceP_cb = ServerContextCallbackPrx.uncheckedCast(istr.readProxy());
        iceP_ctx = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.addContextCallbackAsync(iceP_session, iceP_action, iceP_text, iceP_cb, iceP_ctx, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeContextCallback(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ServerContextCallbackPrx iceP_cb;
        iceP_cb = ServerContextCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.removeContextCallbackAsync(iceP_cb, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getChannelState(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getChannelStateAsync(iceP_channelid, current), (ostr, ret) ->
        {
            Channel.ice_write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setChannelState(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Channel iceP_state;
        iceP_state = Channel.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.setChannelStateAsync(iceP_state, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeChannel(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.removeChannelAsync(iceP_channelid, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addChannel(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        int iceP_parent;
        iceP_name = istr.readString();
        iceP_parent = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.addChannelAsync(iceP_name, iceP_parent, current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendMessageChannel(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        boolean iceP_tree;
        String iceP_text;
        iceP_channelid = istr.readInt();
        iceP_tree = istr.readBool();
        iceP_text = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.sendMessageChannelAsync(iceP_channelid, iceP_tree, iceP_text, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getACL(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getACLAsync(iceP_channelid, current), (ostr, ret) ->
        {
            ret.write(ostr);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setACL(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        ACL[] iceP_acls;
        Group[] iceP_groups;
        boolean iceP_inherit;
        iceP_channelid = istr.readInt();
        iceP_acls = ACLListHelper.read(istr);
        iceP_groups = GroupListHelper.read(istr);
        iceP_inherit = istr.readBool();
        inS.endReadParams();
        return inS.setResultFuture(obj.setACLAsync(iceP_channelid, iceP_acls, iceP_groups, iceP_inherit, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addUserToGroup(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        int iceP_session;
        String iceP_group;
        iceP_channelid = istr.readInt();
        iceP_session = istr.readInt();
        iceP_group = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.addUserToGroupAsync(iceP_channelid, iceP_session, iceP_group, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeUserFromGroup(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        int iceP_session;
        String iceP_group;
        iceP_channelid = istr.readInt();
        iceP_session = istr.readInt();
        iceP_group = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.removeUserFromGroupAsync(iceP_channelid, iceP_session, iceP_group, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_redirectWhisperGroup(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_session;
        String iceP_source;
        String iceP_target;
        iceP_session = istr.readInt();
        iceP_source = istr.readString();
        iceP_target = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.redirectWhisperGroupAsync(iceP_session, iceP_source, iceP_target, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUserNames(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_ids;
        iceP_ids = istr.readIntSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.getUserNamesAsync(iceP_ids, current), (ostr, ret) ->
        {
            NameMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUserIds(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_names;
        iceP_names = istr.readStringSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.getUserIdsAsync(iceP_names, current), (ostr, ret) ->
        {
            IdMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerUser(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<UserInfo, String> iceP_info;
        iceP_info = UserInfoMapHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.registerUserAsync(iceP_info, current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unregisterUser(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        iceP_userid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.unregisterUserAsync(iceP_userid, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateRegistration(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        java.util.Map<UserInfo, String> iceP_info;
        iceP_userid = istr.readInt();
        iceP_info = UserInfoMapHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.updateRegistrationAsync(iceP_userid, iceP_info, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getRegistration(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        iceP_userid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getRegistrationAsync(iceP_userid, current), (ostr, ret) ->
        {
            UserInfoMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getRegisteredUsers(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_filter;
        iceP_filter = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.getRegisteredUsersAsync(iceP_filter, current), (ostr, ret) ->
        {
            NameMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_verifyPassword(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        String iceP_pw;
        iceP_name = istr.readString();
        iceP_pw = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.verifyPasswordAsync(iceP_name, iceP_pw, current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTexture(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        iceP_userid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getTextureAsync(iceP_userid, current), (ostr, ret) ->
        {
            ostr.writeByteSeq(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setTexture(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        byte[] iceP_tex;
        iceP_userid = istr.readInt();
        iceP_tex = istr.readByteSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.setTextureAsync(iceP_userid, iceP_tex, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUptime(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getUptimeAsync(current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateCertificate(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_certificate;
        String iceP_privateKey;
        String iceP_passphrase;
        iceP_certificate = istr.readString();
        iceP_privateKey = istr.readString();
        iceP_passphrase = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.updateCertificateAsync(iceP_certificate, iceP_privateKey, iceP_passphrase, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_startListening(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        int iceP_channelid;
        iceP_userid = istr.readInt();
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.startListeningAsync(iceP_userid, iceP_channelid, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stopListening(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        int iceP_channelid;
        iceP_userid = istr.readInt();
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.stopListeningAsync(iceP_userid, iceP_channelid, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isListening(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        int iceP_channelid;
        iceP_userid = istr.readInt();
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.isListeningAsync(iceP_userid, iceP_channelid, current), (ostr, ret) ->
        {
            ostr.writeBool(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getListeningChannels(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_userid;
        iceP_userid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getListeningChannelsAsync(iceP_userid, current), (ostr, ret) ->
        {
            ostr.writeIntSeq(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getListeningUsers(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_channelid;
        iceP_channelid = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getListeningUsersAsync(iceP_channelid, current), (ostr, ret) ->
        {
            ostr.writeIntSeq(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendWelcomeMessage(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_receiverUserIDs;
        iceP_receiverUserIDs = istr.readIntSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.sendWelcomeMessageAsync(iceP_receiverUserIDs, current));
    }

    /**
     * @hidden
     */
    String[] _iceOps =
            {
                    "addCallback",
                    "addChannel",
                    "addContextCallback",
                    "addUserToGroup",
                    "delete",
                    "effectivePermissions",
                    "getACL",
                    "getAllConf",
                    "getBans",
                    "getCertificateList",
                    "getChannelState",
                    "getChannels",
                    "getConf",
                    "getListeningChannels",
                    "getListeningUsers",
                    "getLog",
                    "getLogLen",
                    "getRegisteredUsers",
                    "getRegistration",
                    "getState",
                    "getTexture",
                    "getTree",
                    "getUptime",
                    "getUserIds",
                    "getUserNames",
                    "getUsers",
                    "hasPermission",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "id",
                    "isListening",
                    "isRunning",
                    "kickUser",
                    "redirectWhisperGroup",
                    "registerUser",
                    "removeCallback",
                    "removeChannel",
                    "removeContextCallback",
                    "removeUserFromGroup",
                    "sendMessage",
                    "sendMessageChannel",
                    "sendWelcomeMessage",
                    "setACL",
                    "setAuthenticator",
                    "setBans",
                    "setChannelState",
                    "setConf",
                    "setState",
                    "setSuperuserPassword",
                    "setTexture",
                    "start",
                    "startListening",
                    "stop",
                    "stopListening",
                    "unregisterUser",
                    "updateCertificate",
                    "updateRegistration",
                    "verifyPassword"
            };

    /**
     * @hidden
     */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if (pos < 0) {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch (pos) {
            case 0: {
                return _iceD_addCallback(this, in, current);
            }
            case 1: {
                return _iceD_addChannel(this, in, current);
            }
            case 2: {
                return _iceD_addContextCallback(this, in, current);
            }
            case 3: {
                return _iceD_addUserToGroup(this, in, current);
            }
            case 4: {
                return _iceD_delete(this, in, current);
            }
            case 5: {
                return _iceD_effectivePermissions(this, in, current);
            }
            case 6: {
                return _iceD_getACL(this, in, current);
            }
            case 7: {
                return _iceD_getAllConf(this, in, current);
            }
            case 8: {
                return _iceD_getBans(this, in, current);
            }
            case 9: {
                return _iceD_getCertificateList(this, in, current);
            }
            case 10: {
                return _iceD_getChannelState(this, in, current);
            }
            case 11: {
                return _iceD_getChannels(this, in, current);
            }
            case 12: {
                return _iceD_getConf(this, in, current);
            }
            case 13: {
                return _iceD_getListeningChannels(this, in, current);
            }
            case 14: {
                return _iceD_getListeningUsers(this, in, current);
            }
            case 15: {
                return _iceD_getLog(this, in, current);
            }
            case 16: {
                return _iceD_getLogLen(this, in, current);
            }
            case 17: {
                return _iceD_getRegisteredUsers(this, in, current);
            }
            case 18: {
                return _iceD_getRegistration(this, in, current);
            }
            case 19: {
                return _iceD_getState(this, in, current);
            }
            case 20: {
                return _iceD_getTexture(this, in, current);
            }
            case 21: {
                return _iceD_getTree(this, in, current);
            }
            case 22: {
                return _iceD_getUptime(this, in, current);
            }
            case 23: {
                return _iceD_getUserIds(this, in, current);
            }
            case 24: {
                return _iceD_getUserNames(this, in, current);
            }
            case 25: {
                return _iceD_getUsers(this, in, current);
            }
            case 26: {
                return _iceD_hasPermission(this, in, current);
            }
            case 27: {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 28: {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 29: {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 30: {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 31: {
                return _iceD_id(this, in, current);
            }
            case 32: {
                return _iceD_isListening(this, in, current);
            }
            case 33: {
                return _iceD_isRunning(this, in, current);
            }
            case 34: {
                return _iceD_kickUser(this, in, current);
            }
            case 35: {
                return _iceD_redirectWhisperGroup(this, in, current);
            }
            case 36: {
                return _iceD_registerUser(this, in, current);
            }
            case 37: {
                return _iceD_removeCallback(this, in, current);
            }
            case 38: {
                return _iceD_removeChannel(this, in, current);
            }
            case 39: {
                return _iceD_removeContextCallback(this, in, current);
            }
            case 40: {
                return _iceD_removeUserFromGroup(this, in, current);
            }
            case 41: {
                return _iceD_sendMessage(this, in, current);
            }
            case 42: {
                return _iceD_sendMessageChannel(this, in, current);
            }
            case 43: {
                return _iceD_sendWelcomeMessage(this, in, current);
            }
            case 44: {
                return _iceD_setACL(this, in, current);
            }
            case 45: {
                return _iceD_setAuthenticator(this, in, current);
            }
            case 46: {
                return _iceD_setBans(this, in, current);
            }
            case 47: {
                return _iceD_setChannelState(this, in, current);
            }
            case 48: {
                return _iceD_setConf(this, in, current);
            }
            case 49: {
                return _iceD_setState(this, in, current);
            }
            case 50: {
                return _iceD_setSuperuserPassword(this, in, current);
            }
            case 51: {
                return _iceD_setTexture(this, in, current);
            }
            case 52: {
                return _iceD_start(this, in, current);
            }
            case 53: {
                return _iceD_startListening(this, in, current);
            }
            case 54: {
                return _iceD_stop(this, in, current);
            }
            case 55: {
                return _iceD_stopListening(this, in, current);
            }
            case 56: {
                return _iceD_unregisterUser(this, in, current);
            }
            case 57: {
                return _iceD_updateCertificate(this, in, current);
            }
            case 58: {
                return _iceD_updateRegistration(this, in, current);
            }
            case 59: {
                return _iceD_verifyPassword(this, in, current);
            }
        }

        assert (false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}

