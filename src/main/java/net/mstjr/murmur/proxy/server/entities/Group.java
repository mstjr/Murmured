//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.mstjr.murmur.proxy.server.entities;

/**
 * A group. Groups are defined per channel, and can inherit members from parent channels.
 **/
public class Group implements Cloneable,
                              java.io.Serializable
{
    /**
     * Group name
     **/
    public String name;

    /**
     * Is this group inherited from a parent channel? Read-only.
     **/
    public boolean inherited;

    /**
     * Does this group inherit members from parent channels?
     **/
    public boolean inherit;

    /**
     * Can subchannels inherit members from this group?
     **/
    public boolean inheritable;

    /**
     * List of users to add to the group.
     **/
    public int[] add;

    /**
     * List of inherited users to remove from the group.
     **/
    public int[] remove;

    /**
     * Current members of the group, including inherited members. Read-only.
     **/
    public int[] members;

    public Group()
    {
        this.name = "";
    }

    public Group(String name, boolean inherited, boolean inherit, boolean inheritable, int[] add, int[] remove, int[] members)
    {
        this.name = name;
        this.inherited = inherited;
        this.inherit = inherit;
        this.inheritable = inheritable;
        this.add = add;
        this.remove = remove;
        this.members = members;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Group r = null;
        if(rhs instanceof Group)
        {
            r = (Group)rhs;
        }

        if(r != null)
        {
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.inherited != r.inherited)
            {
                return false;
            }
            if(this.inherit != r.inherit)
            {
                return false;
            }
            if(this.inheritable != r.inheritable)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.add, r.add))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.remove, r.remove))
            {
                return false;
            }
            return java.util.Arrays.equals(this.members, r.members);
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Murmur::Group");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, inherited);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, inherit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, inheritable);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, add);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remove);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, members);
        return h_;
    }

    public Group clone()
    {
        Group c = null;
        try
        {
            c = (Group)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.name);
        ostr.writeBool(this.inherited);
        ostr.writeBool(this.inherit);
        ostr.writeBool(this.inheritable);
        ostr.writeIntSeq(this.add);
        ostr.writeIntSeq(this.remove);
        ostr.writeIntSeq(this.members);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.name = istr.readString();
        this.inherited = istr.readBool();
        this.inherit = istr.readBool();
        this.inheritable = istr.readBool();
        this.add = istr.readIntSeq();
        this.remove = istr.readIntSeq();
        this.members = istr.readIntSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Group v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Group ice_read(com.zeroc.Ice.InputStream istr)
    {
        Group v = new Group();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Group> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Group v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Group> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Group.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Group _nullMarshalValue = new Group();

    /** @hidden */
    public static final long serialVersionUID = 1322641406L;
}
