//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.mstjr.murmur.proxy.server;

import net.mstjr.murmur.helpers.NameMapHelper;
import net.mstjr.murmur.helpers.UserInfoMapHelper;
import net.mstjr.murmur.proxy.server.users.UserInfo;

/**
 * Callback interface for server authentication and registration. This allows you to support both authentication
 * and account updating.
 * You do not need to implement this if all you want is authentication, you only need this if other scripts
 * connected to the same server calls e.g. {@link Server.setTexture}.
 * Almost all of these methods support fall through, meaning murmur should continue the operation against its
 * own database.
 **/
public interface ServerUpdatingAuthenticator extends ServerAuthenticator
{
    /**
     * Register a new user.
     * @param info Information about user to register.
     * @param current The Current object for the invocation.
     * @return User id of new user, -1 for registration failure, or -2 to fall through.
     **/
    int registerUser(java.util.Map<UserInfo, String> info, com.zeroc.Ice.Current current);

    /**
     * Unregister a user.
     * @param id Userid to unregister.
     * @param current The Current object for the invocation.
     * @return 1 for successful unregistration, 0 for unsuccessful unregistration, -1 to fall through.
     **/
    int unregisterUser(int id, com.zeroc.Ice.Current current);

    /**
     * Get a list of registered users matching filter.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     * @param current The Current object for the invocation.
     * @return List of matching registered users.
     **/
    java.util.Map<Integer, String> getRegisteredUsers(String filter, com.zeroc.Ice.Current current);

    /**
     * Set additional information for user registration.
     * @param id Userid of registered user.
     * @param info Information to set about user. This should be merged with existing information.
     * @param current The Current object for the invocation.
     * @return 1 for successful update, 0 for unsuccessful update, -1 to fall through.
     **/
    int setInfo(int id, java.util.Map<UserInfo, String> info, com.zeroc.Ice.Current current);

    /**
     * Set texture (now called avatar) of user registration.
     * @param id registrationId of registered user.
     * @param tex New texture.
     * @param current The Current object for the invocation.
     * @return 1 for successful update, 0 for unsuccessful update, -1 to fall through.
     **/
    int setTexture(int id, byte[] tex, com.zeroc.Ice.Current current);

    /** @hidden */
    String[] _iceIds =
    {
        "::Ice::Object",
        "::Murmur::ServerAuthenticator",
        "::Murmur::ServerUpdatingAuthenticator"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Murmur::ServerUpdatingAuthenticator";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerUser(ServerUpdatingAuthenticator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<UserInfo, String> iceP_info;
        iceP_info = UserInfoMapHelper.read(istr);
        inS.endReadParams();
        int ret = obj.registerUser(iceP_info, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unregisterUser(ServerUpdatingAuthenticator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        iceP_id = istr.readInt();
        inS.endReadParams();
        int ret = obj.unregisterUser(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getRegisteredUsers(ServerUpdatingAuthenticator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_filter;
        iceP_filter = istr.readString();
        inS.endReadParams();
        java.util.Map<Integer, String> ret = obj.getRegisteredUsers(iceP_filter, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NameMapHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setInfo(ServerUpdatingAuthenticator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        java.util.Map<UserInfo, String> iceP_info;
        iceP_id = istr.readInt();
        iceP_info = UserInfoMapHelper.read(istr);
        inS.endReadParams();
        int ret = obj.setInfo(iceP_id, iceP_info, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setTexture(ServerUpdatingAuthenticator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        byte[] iceP_tex;
        iceP_id = istr.readInt();
        iceP_tex = istr.readByteSeq();
        inS.endReadParams();
        int ret = obj.setTexture(iceP_id, iceP_tex, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    String[] _iceOps =
    {
        "authenticate",
        "getInfo",
        "getRegisteredUsers",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "idToName",
        "idToTexture",
        "nameToId",
        "registerUser",
        "setInfo",
        "setTexture",
        "unregisterUser"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ServerAuthenticator._iceD_authenticate(this, in, current);
            }
            case 1:
            {
                return ServerAuthenticator._iceD_getInfo(this, in, current);
            }
            case 2:
            {
                return _iceD_getRegisteredUsers(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return ServerAuthenticator._iceD_idToName(this, in, current);
            }
            case 8:
            {
                return ServerAuthenticator._iceD_idToTexture(this, in, current);
            }
            case 9:
            {
                return ServerAuthenticator._iceD_nameToId(this, in, current);
            }
            case 10:
            {
                return _iceD_registerUser(this, in, current);
            }
            case 11:
            {
                return _iceD_setInfo(this, in, current);
            }
            case 12:
            {
                return _iceD_setTexture(this, in, current);
            }
            case 13:
            {
                return _iceD_unregisterUser(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
