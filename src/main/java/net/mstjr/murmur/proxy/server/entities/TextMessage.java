//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.mstjr.murmur.proxy.server.entities;

/**
 * A text message between users.
 **/
public class TextMessage implements Cloneable,
                                    java.io.Serializable
{
    /**
     * Sessions (connected users) who were sent this message.
     **/
    public int[] sessions;

    /**
     * Channels who were sent this message.
     **/
    public int[] channels;

    /**
     * Trees of channels who were sent this message.
     **/
    public int[] trees;

    /**
     * The contents of the message.
     **/
    public String text;

    public TextMessage()
    {
        this.text = "";
    }

    public TextMessage(int[] sessions, int[] channels, int[] trees, String text)
    {
        this.sessions = sessions;
        this.channels = channels;
        this.trees = trees;
        this.text = text;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TextMessage r = null;
        if(rhs instanceof TextMessage)
        {
            r = (TextMessage)rhs;
        }

        if(r != null)
        {
            if(!java.util.Arrays.equals(this.sessions, r.sessions))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.channels, r.channels))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.trees, r.trees))
            {
                return false;
            }
            if(this.text != r.text)
            {
                return this.text != null && r.text != null && this.text.equals(r.text);
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Murmur::TextMessage");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, sessions);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, channels);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, trees);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, text);
        return h_;
    }

    public TextMessage clone()
    {
        TextMessage c = null;
        try
        {
            c = (TextMessage)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeIntSeq(this.sessions);
        ostr.writeIntSeq(this.channels);
        ostr.writeIntSeq(this.trees);
        ostr.writeString(this.text);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.sessions = istr.readIntSeq();
        this.channels = istr.readIntSeq();
        this.trees = istr.readIntSeq();
        this.text = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, TextMessage v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public TextMessage ice_read(com.zeroc.Ice.InputStream istr)
    {
        TextMessage v = new TextMessage();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<TextMessage> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, TextMessage v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<TextMessage> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(TextMessage.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final TextMessage _nullMarshalValue = new TextMessage();

    /** @hidden */
    public static final long serialVersionUID = -601735160L;
}
