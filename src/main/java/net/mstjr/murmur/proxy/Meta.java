//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.mstjr.murmur.proxy;

import net.mstjr.murmur.helpers.ConfigMapHelper;
import net.mstjr.murmur.helpers.ServerListHelper;
import net.mstjr.murmur.exceptions.invalid.InvalidCallbackException;
import net.mstjr.murmur.exceptions.invalid.InvalidSecretException;
import net.mstjr.murmur.proxy.server.Server;
import net.mstjr.murmur.prx.MetaCallbackPrx;
import net.mstjr.murmur.prx.ServerPrx;

/**
 * This is the meta interface. It is primarily used for retrieving the {@link Server} interfaces for each individual server.
 **/
public interface Meta extends com.zeroc.Ice.Object {
    /**
     * Holds the result of operation getVersion.
     **/
    class GetVersionResult {
        /**
         * Default constructor.
         **/
        public GetVersionResult() {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetVersion.
         *
         * @param major Major version.
         * @param minor Minor version.
         * @param patch Patchlevel.
         * @param text  Textual representation of version. Note that this may not match the {@link major}, {@link minor} and {@link patch} levels, as it
         *              may be simply the compile date or the SVN revision. This is usually the text you want to present to users.
         **/
        public GetVersionResult(int major, int minor, int patch, String text) {
            this.major = major;
            this.minor = minor;
            this.patch = patch;
            this.text = text;
        }

        /**
         * Major version.
         **/
        public int major;
        /**
         * Minor version.
         **/
        public int minor;
        /**
         * Patchlevel.
         **/
        public int patch;
        /**
         * Textual representation of version. Note that this may not match the {@link major}, {@link minor} and {@link patch} levels, as it
         * may be simply the compile date or the SVN revision. This is usually the text you want to present to users.
         **/
        public String text;

        public void write(com.zeroc.Ice.OutputStream ostr) {
            ostr.writeInt(this.major);
            ostr.writeInt(this.minor);
            ostr.writeInt(this.patch);
            ostr.writeString(this.text);
        }

        public void read(com.zeroc.Ice.InputStream istr) {
            this.major = istr.readInt();
            this.minor = istr.readInt();
            this.patch = istr.readInt();
            this.text = istr.readString();
        }
    }

    /**
     * Fetch interface to specific server.
     *
     * @param id      Server ID. See {@link Server.getId}.
     * @param current The Current object for the invocation.
     * @return Interface for specified server, or a null proxy if id is invalid.
     **/
    java.util.concurrent.CompletionStage<ServerPrx> getServerAsync(int id, com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     *
     * @param current The Current object for the invocation.
     * @return Interface for new server.
     **/
    java.util.concurrent.CompletionStage<ServerPrx> newServerAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch list of all currently running servers.
     *
     * @param current The Current object for the invocation.
     * @return List of interfaces for running servers.
     **/
    java.util.concurrent.CompletionStage<ServerPrx[]> getBootedServersAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch list of all defined servers.
     *
     * @param current The Current object for the invocation.
     * @return List of interfaces for all servers.
     **/
    java.util.concurrent.CompletionStage<ServerPrx[]> getAllServersAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch default configuration. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     *
     * @param current The Current object for the invocation.
     * @return Default configuration of the servers.
     **/
    java.util.concurrent.CompletionStage<java.util.Map<String, String>> getDefaultConfAsync(com.zeroc.Ice.Current current)
            throws InvalidSecretException;

    /**
     * Fetch version of Murmur.
     *
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with an instance of Meta.GetVersionResult.
     **/
    java.util.concurrent.CompletionStage<GetVersionResult> getVersionAsync(com.zeroc.Ice.Current current);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     *
     * @param cb      Callback interface which will receive notifications.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> addCallbackAsync(MetaCallbackPrx cb, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException;

    /**
     * Remove a callback.
     *
     * @param cb      Callback interface to be removed.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> removeCallbackAsync(MetaCallbackPrx cb, com.zeroc.Ice.Current current)
            throws InvalidCallbackException,
            InvalidSecretException;

    /**
     * Get murmur uptime.
     *
     * @param current The Current object for the invocation.
     * @return Uptime of murmur in seconds
     **/
    java.util.concurrent.CompletionStage<Integer> getUptimeAsync(com.zeroc.Ice.Current current);

    /**
     * Get slice file.
     *
     * @param current The Current object for the invocation.
     * @return Contents of the slice file server compiled with.
     **/
    java.util.concurrent.CompletionStage<String> getSliceAsync(com.zeroc.Ice.Current current);

    /**
     * @hidden
     */
    String[] _iceIds =
            {
                    "::Ice::Object",
                    "::Murmur::Meta"
            };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current) {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current) {
        return ice_staticId();
    }

    static String ice_staticId() {
        return "::Murmur::Meta";
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getServer(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        iceP_id = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.getServerAsync(iceP_id, current), (ostr, ret) ->
        {
            ostr.writeProxy(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_newServer(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.newServerAsync(current), (ostr, ret) ->
        {
            ostr.writeProxy(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBootedServers(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getBootedServersAsync(current), (ostr, ret) ->
        {
            ServerListHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getAllServers(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getAllServersAsync(current), (ostr, ret) ->
        {
            ServerListHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultConf(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getDefaultConfAsync(current), (ostr, ret) ->
        {
            ConfigMapHelper.write(ostr, ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getVersion(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getVersionAsync(current), (ostr, ret) ->
        {
            ret.write(ostr);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addCallback(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MetaCallbackPrx iceP_cb;
        iceP_cb = MetaCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.addCallbackAsync(iceP_cb, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeCallback(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MetaCallbackPrx iceP_cb;
        iceP_cb = MetaCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.removeCallbackAsync(iceP_cb, current));
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUptime(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getUptimeAsync(current), (ostr, ret) ->
        {
            ostr.writeInt(ret);
        });
    }

    /**
     * @param obj     -
     * @param inS     -
     * @param current -
     * @return -
     * @hidden
     **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getSlice(Meta obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.getSliceAsync(current), (ostr, ret) ->
        {
            ostr.writeString(ret);
        });
    }

    /**
     * @hidden
     */
    String[] _iceOps =
            {
                    "addCallback",
                    "getAllServers",
                    "getBootedServers",
                    "getDefaultConf",
                    "getServer",
                    "getSlice",
                    "getUptime",
                    "getVersion",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "newServer",
                    "removeCallback"
            };

    /**
     * @hidden
     */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if (pos < 0) {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch (pos) {
            case 0: {
                return _iceD_addCallback(this, in, current);
            }
            case 1: {
                return _iceD_getAllServers(this, in, current);
            }
            case 2: {
                return _iceD_getBootedServers(this, in, current);
            }
            case 3: {
                return _iceD_getDefaultConf(this, in, current);
            }
            case 4: {
                return _iceD_getServer(this, in, current);
            }
            case 5: {
                return _iceD_getSlice(this, in, current);
            }
            case 6: {
                return _iceD_getUptime(this, in, current);
            }
            case 7: {
                return _iceD_getVersion(this, in, current);
            }
            case 8: {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 9: {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 10: {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 11: {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 12: {
                return _iceD_newServer(this, in, current);
            }
            case 13: {
                return _iceD_removeCallback(this, in, current);
            }
        }

        assert (false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
